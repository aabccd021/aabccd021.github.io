<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>aabccd021&#39;s blog</title>
    <link>https://aabccd021.github.io/</link>
    
    <atom:link href="https://aabccd021.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>aabccd021&#39;s blog</description>
    <pubDate>Tue, 31 Jan 2023 09:38:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>initial-commit</title>
      <link>https://aabccd021.github.io/2023/01/30/initial-commit/</link>
      <guid>https://aabccd021.github.io/2023/01/30/initial-commit/</guid>
      <pubDate>Mon, 30 Jan 2023 14:05:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p><code>abc</code></p><p>Sets the module system for the program. See the <a href='/docs/handbook/modules.html'>Modules</a> reference page for more information. You very likely want <code>&quot;CommonJS&quot;</code> for node projects.</p><p>Changing <code>module</code> affects <a href="#moduleResolution"><code>moduleResolution</code></a> which <a href="/docs/handbook/module-resolution.html">also has a reference page</a>.</p><p>Hereâ€™s some example output for this file:</p><h4 id="Aab"><a href="#Aab" class="headerlink" title="Aab"></a><code>Aab</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #F47067">interface</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style="color: #ADBAC7"> &#123;</span></div><div class='line'><span style="color: #ADBAC7">  </span><span style="color: #F69D50"><data-lsp lsp='(property) Todo.title: string' >title</data-lsp></span><span style="color: #F47067">:</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">string</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">&#125;</span></div><div class='line'><span style="color: #ADBAC7"> </span></div><div class='line'><span style="color: #F47067">const</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF"><data-lsp lsp='const todo: Readonly&lt;Todo>' >todo</data-lsp></span><span style="color: #F47067">:</span><span style="color: #ADBAC7"> </span><span style="color: #F69D50"><data-lsp lsp='type Readonly&lt;T> = &#123; readonly [P in keyof T]: T[P]; &#125;' >Readonly</data-lsp></span><span style="color: #ADBAC7">&lt;</span><span style="color: #F69D50"><data-lsp lsp='interface Todo' >Todo</data-lsp></span><span style="color: #ADBAC7">&gt; </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> &#123;</span></div><div class='line'><span style="color: #ADBAC7">  <data-lsp lsp='(property) title: string' >title</data-lsp>: </span><span style="color: #96D0FF">"Delete inactive users"</span><span style="color: #ADBAC7">,</span></div><div class='line'><span style="color: #ADBAC7">&#125;;</span></div><div class='line'><span style="color: #ADBAC7"> </span></div><div class='line'><span style="color: #ADBAC7"><data-lsp lsp='const todo: Readonly&lt;Todo>' >todo</data-lsp>.<data-err><data-lsp lsp='(property) title: any' >title</data-lsp></data-err> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"Hello"</span><span style="color: #ADBAC7">;</span></div><span class="error"><span>Cannot assign to 'title' because it is a read-only property.</span><span class="code">2540</span></span><span class="error-behind">Cannot assign to 'title' because it is a read-only property.</span></code></div></pre><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a><code>CommonJS</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: #768390">// @filename: index.ts</span></div><div class='line highlight'><span style="color: #F47067">import</span><span style="color: #ADBAC7"> &#123; <data-lsp lsp='(alias) const valueOfPi: 3.1425&#10;import valueOfPi' >valueOfPi</data-lsp> &#125; </span><span style="color: #F47067">from</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #F47067">export</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">const</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF"><data-lsp lsp='const twoPi: number' style='border-bottom: solid 2px lightgrey;'>twoPi</data-lsp></span><span style="color: #ADBAC7"> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> <data-lsp lsp='(alias) const valueOfPi: 3.1425&#10;import valueOfPi' >valueOfPi</data-lsp> </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">25</span><span style="color: #ADBAC7">;</span></div><div class='meta-line'><span class='popover-prefix'>              </span><span class='popover'><div class='arrow'></div>const twoPi: number</span></div></code></div></pre><h4 id="CommonJS-1"><a href="#CommonJS-1" class="headerlink" title="CommonJS"></a><code>CommonJS</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #96D0FF">"use strict"</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #6CB6FF">Object</span><span style="color: #ADBAC7">.</span><span style="color: #DCBDFB">defineProperty</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"__esModule"</span><span style="color: #ADBAC7">, &#123; value: </span><span style="color: #6CB6FF">true</span><span style="color: #ADBAC7"> &#125;);</span></div><div class='line'><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #F47067">const</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">constants_1</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">require</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">);</span></div><div class='line'><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> constants_1.valueOfPi </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">2</span><span style="color: #ADBAC7">;</span></div><div class='line'>&nbsp;</div></code></div></pre><h4 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a><code>UMD</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #ADBAC7">(</span><span style="color: #F47067">function</span><span style="color: #ADBAC7"> (</span><span style="color: #F69D50">factory</span><span style="color: #ADBAC7">) &#123;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #F47067">if</span><span style="color: #ADBAC7"> (</span><span style="color: #F47067">typeof</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">module</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">===</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"object"</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&&</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">typeof</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">module</span><span style="color: #ADBAC7">.</span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">===</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"object"</span><span style="color: #ADBAC7">) &#123;</span></div><div class='line'><span style="color: #ADBAC7">        </span><span style="color: #F47067">var</span><span style="color: #ADBAC7"> v </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #DCBDFB">factory</span><span style="color: #ADBAC7">(require, </span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">);</span></div><div class='line'><span style="color: #ADBAC7">        </span><span style="color: #F47067">if</span><span style="color: #ADBAC7"> (v </span><span style="color: #F47067">!==</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">undefined</span><span style="color: #ADBAC7">) </span><span style="color: #6CB6FF">module</span><span style="color: #ADBAC7">.</span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> v;</span></div><div class='line'><span style="color: #ADBAC7">    &#125;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #F47067">else</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">if</span><span style="color: #ADBAC7"> (</span><span style="color: #F47067">typeof</span><span style="color: #ADBAC7"> define </span><span style="color: #F47067">===</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"function"</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">&&</span><span style="color: #ADBAC7"> define.amd) &#123;</span></div><div class='line'><span style="color: #ADBAC7">        </span><span style="color: #DCBDFB">define</span><span style="color: #ADBAC7">([</span><span style="color: #96D0FF">"require"</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"exports"</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">], factory);</span></div><div class='line'><span style="color: #ADBAC7">    &#125;</span></div><div class='line'><span style="color: #ADBAC7">&#125;)(</span><span style="color: #F47067">function</span><span style="color: #ADBAC7"> (</span><span style="color: #F69D50">require</span><span style="color: #ADBAC7">, </span><span style="color: #F69D50">exports</span><span style="color: #ADBAC7">) &#123;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #96D0FF">"use strict"</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #6CB6FF">Object</span><span style="color: #ADBAC7">.</span><span style="color: #DCBDFB">defineProperty</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"__esModule"</span><span style="color: #ADBAC7">, &#123; value: </span><span style="color: #6CB6FF">true</span><span style="color: #ADBAC7"> &#125;);</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #F47067">const</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">constants_1</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">require</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">);</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> constants_1.valueOfPi </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">2</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">&#125;);</span></div><div class='line'>&nbsp;</div></code></div></pre><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a><code>AMD</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #DCBDFB">define</span><span style="color: #ADBAC7">([</span><span style="color: #96D0FF">"require"</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"exports"</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">], </span><span style="color: #F47067">function</span><span style="color: #ADBAC7"> (</span><span style="color: #F69D50">require</span><span style="color: #ADBAC7">, </span><span style="color: #F69D50">exports</span><span style="color: #ADBAC7">, </span><span style="color: #F69D50">constants_1</span><span style="color: #ADBAC7">) &#123;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #96D0FF">"use strict"</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #6CB6FF">Object</span><span style="color: #ADBAC7">.</span><span style="color: #DCBDFB">defineProperty</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"__esModule"</span><span style="color: #ADBAC7">, &#123; value: </span><span style="color: #6CB6FF">true</span><span style="color: #ADBAC7"> &#125;);</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> constants_1.valueOfPi </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">2</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">&#125;);</span></div><div class='line'>&nbsp;</div></code></div></pre><h4 id="System"><a href="#System" class="headerlink" title="System"></a><code>System</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #ADBAC7">System.</span><span style="color: #DCBDFB">register</span><span style="color: #ADBAC7">([</span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">], </span><span style="color: #F47067">function</span><span style="color: #ADBAC7"> (</span><span style="color: #F69D50">exports_1</span><span style="color: #ADBAC7">, </span><span style="color: #F69D50">context_1</span><span style="color: #ADBAC7">) &#123;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #96D0FF">"use strict"</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #F47067">var</span><span style="color: #ADBAC7"> constants_1, twoPi;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #F47067">var</span><span style="color: #ADBAC7"> __moduleName </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> context_1 </span><span style="color: #F47067">&&</span><span style="color: #ADBAC7"> context_1.id;</span></div><div class='line'><span style="color: #ADBAC7">    </span><span style="color: #F47067">return</span><span style="color: #ADBAC7"> &#123;</span></div><div class='line'><span style="color: #ADBAC7">        setters: [</span></div><div class='line'><span style="color: #ADBAC7">            </span><span style="color: #F47067">function</span><span style="color: #ADBAC7"> (</span><span style="color: #F69D50">constants_1_1</span><span style="color: #ADBAC7">) &#123;</span></div><div class='line'><span style="color: #ADBAC7">                constants_1 </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> constants_1_1;</span></div><div class='line'><span style="color: #ADBAC7">            &#125;</span></div><div class='line'><span style="color: #ADBAC7">        ],</span></div><div class='line'><span style="color: #ADBAC7">        </span><span style="color: #DCBDFB">execute</span><span style="color: #ADBAC7">: </span><span style="color: #F47067">function</span><span style="color: #ADBAC7"> () &#123;</span></div><div class='line'><span style="color: #ADBAC7">            </span><span style="color: #DCBDFB">exports_1</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF">"twoPi"</span><span style="color: #ADBAC7">, twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> constants_1.valueOfPi </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">2</span><span style="color: #ADBAC7">);</span></div><div class='line'><span style="color: #ADBAC7">        &#125;</span></div><div class='line'><span style="color: #ADBAC7">    &#125;;</span></div><div class='line'><span style="color: #ADBAC7">&#125;);</span></div><div class='line'>&nbsp;</div></code></div></pre><h4 id="ESNext"><a href="#ESNext" class="headerlink" title="ESNext"></a><code>ESNext</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #F47067">import</span><span style="color: #ADBAC7"> &#123; valueOfPi &#125; </span><span style="color: #F47067">from</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #F47067">export</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">const</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">twoPi</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> valueOfPi </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">2</span><span style="color: #ADBAC7">;</span></div><div class='line'>&nbsp;</div></code></div></pre><h4 id="ES2020"><a href="#ES2020" class="headerlink" title="ES2020"></a><code>ES2020</code></h4><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #F47067">import</span><span style="color: #ADBAC7"> &#123; valueOfPi &#125; </span><span style="color: #F47067">from</span><span style="color: #ADBAC7"> </span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #F47067">export</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">const</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">twoPi</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> valueOfPi </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">2</span><span style="color: #ADBAC7">;</span></div><div class='line'>&nbsp;</div></code></div></pre><p>If you are wondering about the difference between ES2015 and ES2020, ES2020 adds support for dynamic <code>import</code>s, and <code>import.meta</code>.</p><h3 id="None"><a href="#None" class="headerlink" title="None"></a><code>None</code></h3><pre class="shiki github-dark-dimmed twoslash lsp" style="background-color: #22272e; color: #adbac7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #96D0FF">"use strict"</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #6CB6FF">Object</span><span style="color: #ADBAC7">.</span><span style="color: #DCBDFB">defineProperty</span><span style="color: #ADBAC7">(</span><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">, </span><span style="color: #96D0FF">"__esModule"</span><span style="color: #ADBAC7">, &#123; value: </span><span style="color: #6CB6FF">true</span><span style="color: #ADBAC7"> &#125;);</span></div><div class='line'><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">void</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">0</span><span style="color: #ADBAC7">;</span></div><div class='line'><span style="color: #F47067">const</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">constants_1</span><span style="color: #ADBAC7"> </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">require</span><span style="color: #ADBAC7">(</span><span style="color: #96D0FF">"./constants"</span><span style="color: #ADBAC7">);</span></div><div class='line'><span style="color: #6CB6FF">exports</span><span style="color: #ADBAC7">.twoPi </span><span style="color: #F47067">=</span><span style="color: #ADBAC7"> constants_1.valueOfPi </span><span style="color: #F47067">*</span><span style="color: #ADBAC7"> </span><span style="color: #6CB6FF">2</span><span style="color: #ADBAC7">;</span></div><div class='line'>&nbsp;</div></code></div></pre>]]></content:encoded>
      
      
      
      
      <comments>https://aabccd021.github.io/2023/01/30/initial-commit/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
